// File: cs414Asg02Q2.cpp 
// Author: Terrence Gaines
// Purpose: test various reg expressions against strings
#include <iostream>
#include <regex>
#include <array>

using namespace std;



int main()
{
	string regStr1 = R"(\b[A-Za-z_][A-Za-z0-9_]*\b)"; //C++ Identifiers
	string regStr2 = R"(\b[0-9]{3}-[0-9]{3}-[0-9]{4}|\([0-9]{3}\) [0-9]{3}-[0-9]{4}\b)"; //Phone Numbers https://coderpad.io/blog/development/the-complete-guide-to-regular-expressions-regex/
	string regStr3 = R"(\b[+-]?[0-9]+(\.[0-9]+)?\b)"; //Floating point numbers (Plus positive or negative signs) Code generated via grok prompt: what's wrong with this regular expression in c++: string regStr3 = R"(\b[0-9]+\b|\b[+-][0-9]+\b )"; //Floating point numbers (Plus positive or negative signs)
	string regStr4 = R"(\b([a-zA-Z01])([a-zA-Z01])\2\1\b|\b([a-zA-Z01])\3\3\b)"; //Binary Palindromes of length 3-4 Generated via grok prompt: "can you generate a regex string that sorts out 3-4 character palindromes"

	regex regEx1(regStr1);
	regex regEx2(regStr2);
	regex regEx3(regStr3);
	regex regEx4(regStr4);

	string test1[3] = { "Apple", "203", "_Twenty_" };
	string test2[3] = { "256-200-7981", "256-200-200", "(256) 200-7981" };
	string test3[3] = { "12.2", "+13", "-10.10.10" };
	string test4[3] = { "taco", "1001", "deed" };

	smatch result;


/*code generated by grok via prompt :
what is wrong with this c++ code:// File: cs414Asg02Q2.cpp
// Author: Terrence Gaines
// Purpose: test various reg expressions against strings
#include <iostream>
#include <regex>
#include <array>

using namespace std;



int main()
{
	string regStr1 = "\b[A-Za-z|_][A-Za-z0-9|_]*\b"; //C++ Identifiers
	string regStr2 = "\b[0-9]{3}-[0-9]{3}-[0-9]{4}|([0-9]{3}) [0-9]{3}-[0-9]{4}\b"; //Phone Numbers https://coderpad.io/blog/development/the-complete-guide-to-regular-expressions-regex/
	string regStr3 = "\b[0-9]+\b|\b\+[0-9]+\b|\b\-[0-9]+\b|\b[0-9]+\.[0-9]*\b|\b\+[0-9]+\.[0-9]*\b|\b\-[0-9]+\.[0-9]*\b"; //Floating point numbers (Plus positive or negative signs)
	string regStr4 = "\b(([a-zA-Z0-1])([a-zA-Z0-1])\3\2|([a-zA-Z0-1])\4([a-zA-Z0-1])\5\4)\b"; //Binary Palindromes of length 3-4 Generated via grok prompts: "Regex to search for palindrome of length 3-4" and "it can only contain letters and numbers"

	regex regEx1(regStr1);
	regex regEx2(regStr2);
	regex regEx3(regStr3);
	regex regEx4(regStr4);

	string test1[3] = { "Apple", "203", "_Twenty_" };
	string test2[3] = { "256 - 200 - 7981", "256 - 200 - 200", "(256) 200-7981" };
	string test3[3] = { "12.2", "+13", "-10.10.10" };
	string test4[3] = { "taco", "1001", "eye" };

	smatch results1;
	smatch results2;
	smatch results3;
	smatch results4;

	for (string test:test1)
	{
		regex_search(test, results1, regEx1);
	}
	for (string test : test2)
	{
		regex_search(test, results2, regEx2);
	}
	for (string test:test3)
	{
		regex_search(test, results3, regEx3);
	}
	for (string test:test4)
	{
		regex_search(test, results4, regEx4);
	}


	cout << "test 1:\n";
	for (string result : results1)
	{
		cout << result << endl;
	}

	cout << "test 2:\n";
	for (string result : results2)
	{
		cout << result << endl;
	}

	cout << "test 3:\n";
	for (string result : results3)
	{
		cout << result << endl;
	}

	cout << "test 4:\n";
	for (string result : results4)
	{
		cout << result << endl;
	}
}

*/

	for (const string& test : test1) {
		smatch results;
		if (regex_match(test, results, regEx1)) {
			cout << test << ": Match\n";
		}
		else {
			cout << test << ": No match\n";
		}
	}

	for (const string& test : test2) {
		smatch results;
		if (regex_match(test, results, regEx2)) {
			cout << test << ": Match\n";
		}
		else {
			cout << test << ": No match\n";
		}
	}

	for (const string& test : test3) {
		smatch results;
		if (regex_match(test, results, regEx3)) {
			cout << test << ": Match\n";
		}
		else {
			cout << test << ": No match\n";
		}
	}

	for (const string& test : test4) {
		smatch results;
		if (regex_match(test, results, regEx4)) {
			cout << test << ": Match\n";
		}
		else {
			cout << test << ": No match\n";
		}
	}

}

